[tool.poetry]
name = "dataclass-binder"
version = "0.1.0"
description = "Library to bind TOML data to Python dataclasses in a type-safe way."
authors = [
    "Maarten ter Huurne <maarten.terhuurne@protix.eu>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/ProtixIT/dataclass-binder"
keywords = ["dataclass", "toml", "bind", "binding"]
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/ProtixIT/dataclass-binder/issues"

[tool.poetry.dependencies]
python = "^3.10"
tomli = {version = "^2.0.1", python = "<3.11"}

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
mypy = "^0.991"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
pretty = true
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
branch = true
source = ["dataclass_binder"]

[tool.coverage.report]
exclude_lines = [
    # Explicit override:
    "pragma: no cover",
    # Intended to be unreachable:
    "raise NotImplementedError$",
    "raise NotImplementedError\\(",
    "assert False$",
    "assert False,",
    # Debug-only code:
    "def __repr__\\(",
    # Exclusive to mypy:
    "if TYPE_CHECKING:$",
    "\\.\\.\\.$",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
